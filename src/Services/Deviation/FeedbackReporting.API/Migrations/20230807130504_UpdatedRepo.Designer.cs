// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Microsoft.eShopOnContainers.Services.Deviation.FeedbackReporting.API.Infrastructure;

#nullable disable

namespace Microsoft.eShopOnContainers.Services.Deviation.FeedbackReporting.API.Migrations
{
    [DbContext(typeof(FeedbackReportingContext))]
    [Migration("20230807130504_UpdatedRepo")]
    partial class UpdatedRepo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FeedbackReportFeedbackReportReplyMethod", b =>
                {
                    b.Property<Guid>("FeedbackReportsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReplyMethodsId")
                        .HasColumnType("int");

                    b.HasKey("FeedbackReportsId", "ReplyMethodsId");

                    b.HasIndex("ReplyMethodsId");

                    b.ToTable("FeedbackReportFeedbackReportReplyMethod", "feedbackreporting");
                });

            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Deviation.FeedbackReporting.API.Model.FeedbackReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataValidFrom")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("DataValidFrom");

                    b.Property<DateTime>("DataValidTo")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("DataValidTo");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("POBox")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublicId"));

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WorkPhone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FeedbackReports", "feedbackreporting");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("FeedbackReportsHistory", "feedbackreporting");
                                ttb
                                    .HasPeriodStart("DataValidFrom")
                                    .HasColumnName("DataValidFrom");
                                ttb
                                    .HasPeriodEnd("DataValidTo")
                                    .HasColumnName("DataValidTo");
                            }));
                });

            modelBuilder.Entity("Microsoft.eShopOnContainers.Services.Deviation.FeedbackReporting.API.Model.FeedbackReportReplyMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FeedbackReplyMethods", "feedbackreporting");
                });

            modelBuilder.Entity("FeedbackReportFeedbackReportReplyMethod", b =>
                {
                    b.HasOne("Microsoft.eShopOnContainers.Services.Deviation.FeedbackReporting.API.Model.FeedbackReport", null)
                        .WithMany()
                        .HasForeignKey("FeedbackReportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.eShopOnContainers.Services.Deviation.FeedbackReporting.API.Model.FeedbackReportReplyMethod", null)
                        .WithMany()
                        .HasForeignKey("ReplyMethodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
